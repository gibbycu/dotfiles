" This must be first, because it changes other options as side effect
set nocompatible

" Automatic reloading of .vimrc
autocmd! bufwritepost vimrc source ~/dotfiles/vim/vimrc

"source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

filetype off

"execute pathogen#infect('bundle/{}', '~/vimfiles/bundle/{}')
call pathogen#infect()
call pathogen#helptags()
" let g:pathogen_disabled = []
" call add(g:pathogen_disabled, 'latex-box')
" UltiSnips  settings to not conflict with YCM
let g:UltiSnipsExpandTrigger = '<c-j>'
let g:UltiSnipsListSnippets = '<c-l>'
let g:UltiSnipsJumpForwardTrigger = '<c-j>'
let g:UltiSnipsJumpBackwardTrigger = '<c-k>'
" set this so that YCM will work with Ultisnips
let g:UltiSnipsUsePythonVersion = 2


" Mouse and backspace
set mouse=a 
set bs=2 " make backspace behave like normal again
set backspace=indent,eol,start  " make that backspace key work the way it should

" Color scheme
"set t_Co=256
"let g:solarized_termcolors=256
colors solarized
"
" Syntastic settings
let g:syntastic_mode_map = { "mode": "active",
                            \ "active_filetypes": ["python"],
                            \ "passive_filetypes": ["rst","tex"] }
let g:syntastic_aggregate_errors = 1
let g:syntastic_check_on_open=0
let g:syntastic_enable_signs=1
let g:syntastic_python_checkers = ["flake8", "pep8"]
let g:syntastic_tex_checkers = ["lacheck"]
let g:syntastic_debug = 0

" Enable syntax highlighting
" You need to reload this file for the change to apply
filetype plugin indent on
syntax on

" allows you to deal with multiple unsaved
" buffers simultaneously without resorting
" to misusing tabs
set hidden

" setting for python completion
"autocmd FileType python set completefunc=pythoncomplete#Complete
"autocmd FileType python inoremap <Tab> <C-x><C-o>

" settings to produce unix format files
set fileformat=dos
set fileformats=unix,dos

" set so that vim-latex works
let g:tex_flavor='latex'

" allow underlines to be visible in conemu
" http://superuser.com/questions/664130/conemu-solarized-color-scheme-not-displaying-properly-in-vim
let g:solarized_underline=0

" latex-box folding
let g:LatexBox_Folding=1
let g:LatexBox_fold_sections=[
            \ "part",
            \ "chapter",
            \ "section",
            \ "subsection",
            \ "subsubsection",
            \ "figure",
            \ "table"]
let g:LatexBox_complete_inlineMath = 1

" conceal characters
if has('gui_running')
    :cd $USERPROFILE
    au GUIEnter * simalt ~x
    set guifont=Consolas:h10
    set encoding=utf-8
    set conceallevel=2
    let g:tex_conceal= 'adgmsS'
    hi Conceal guibg=White guifg=DarkMagenta
endif

" set magic so search is like regular expressions
set magic

" folding options
set foldmethod=syntax
set foldlevelstart=2

" Showing line numbers and length
set number " show line numbers
" set tw=80 " width of document (used by gd)
set wrap
set linebreak
set so=999
" "" set nowrap " don't automatically wrap on load
" "" set fo-=t " don't automatically wrap text when typing
" set colorcolumn=80
" highlight ColorColumn ctermbg=233

" Real programmers don't use TABs but spaces
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set expandtab

" Disable stupid backup and swap files - they trigger too many events
" for file system watchers
set nobackup
set nowritebackup
set noswapfile

" Setting some decent VIM settings for programming from git install

set ai                          " set auto-indenting on for programming
set showmatch                   " automatically show matching brackets. works like it does in bbedit.
set vb                          " turn on the "visual bell" - which is much quieter than the "audio blink"
set ruler                       " show the cursor position all the time
set laststatus=2                " make the last line where the status is two lines deep so you can see status always
set background=dark             " Use colours that work well on a dark background (Console is usually black)
set showmode                    " show the current mode

" turn off scroll bars
" this helps gvim from coming undocked and who needs scroll bars anyways
set go-=r go-=R go-=l go-=L go+=b
" set guioptions+=b guioptions-=e guioptions-=L " guioptions=grtb

" set leader key
let mapleader = ","

" insert lines without entering insert mode
map <Enter> o<ESC>
map <S-Enter> O<ESC>

" change to current working directory
map <Leader>cwd :execute ':cd %:p:h'<CR>

" Escape quickly with jj
imap jj <esc>

" space to insert space
noremap <SPACE> i<SPACE><ESC>

" save is typical save
map upa :execute ':bufdo! update'<CR>
cmap W w

" nerd tree
map <C-n> :NERDTreeToggle<CR>
let NERDTreeShowBookmarks=1

" close buffer without closing window
command! Bc :bn|:bd#

" YCM settings
" let g:ycm_autoclose_preview_window_after_completion = 0
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_goto_buffer_command = 'vertical-split'
" Do not display "Pattern not found" messages during YouCompleteMe completion
" Patch: https://groups.google.com/forum/#!topic/vim_dev/WeBBjkXE8H8
try
  set shortmess+=c
catch /E539: Illegal character/
endtry

" Gundo settings
noremap <leader>g :GundoToggle<CR>

" for python testing or code execution
noremap <silent> <leader>t :w<CR>:!cls & activate swdev & python %<CR>
noremap <silent> <leader>f :w<CR>:!cls & autopep8 --in-place %<CR>

" quick build of a latex document
noremap <silent> <leader>ba :w<CR>:!cls & lualatex %<CR><CR>
noremap <silent> <leader>bt :w<CR>:!cls & C:/Users/mdg/repos/phd/thesis/doc/build.bat<CR>:<CR>
noremap <silent> <leader>bts :w<CR>:!cls & C:/Users/mdg/repos/phd/thesis/doc/builds.bat<CR><CR>

" easier moving of code blocks
" Try to go into visual mode (v), thenselect several lines of code here and
" then press ``>`` several times.
vnoremap < <gv " better indentation
vnoremap > >gv " better indentation

" Show EOL type and last modified timestamp, right after the filename
set statusline=%<%F%h%m%r\ [%{&ff}]\ %{fugitive#statusline()}\ (%{strftime(\"%H:%M\ %d/%m/%Y\",getftime(expand(\"%:p\")))})%=%l,%c%V\ %P

"------------------------------------------------------------------------------
" Only do this part when compiled with support for autocommands.
if has("autocmd")
    "Set UTF-8 as the default encoding for commit messages
    autocmd BufReadPre COMMIT_EDITMSG,git-rebase-todo setlocal fileencodings=utf-8
    

    "Remember the positions in files with some git-specific exceptions"

    " set to files current directory
    autocmd BufEnter * silent! lcd %:p:h

    autocmd BufReadPost *
      \ if line("'\"") > 0 && line("'\"") <= line("$")
      \           && expand("%") !~ "COMMIT_EDITMSG"
      \           && expand("%") !~ "ADD_EDIT.patch"
      \           && expand("%") !~ "addp-hunk-edit.diff"
      \           && expand("%") !~ "git-rebase-todo" |
      \   exe "normal g`\"" |
      \ endif

      autocmd BufNewFile,BufRead *.patch set filetype=diff
      autocmd BufNewFile,BufRead *.diff set filetype=diff

      autocmd Syntax diff
      \ highlight WhiteSpaceEOL ctermbg=red |
      \ match WhiteSpaceEOL /\(^+.*\)\@<=\s\+$/

      autocmd Syntax gitcommit setlocal textwidth=74
endif " has("autocmd")

